!function(){"use strict";var app=angular.module("racepoint",["ngRoute"]);app.config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{controller:"GatewayController",templateUrl:"views/gateway.html"}).when("/teams",{controller:"TeamsController",templateUrl:"views/teams/list.html"}).when("/teams/add",{controller:"AddTeamController",templateUrl:"views/teams/add.html"}).when("/teams/:id",{controller:"TeamController",templateUrl:"views/teams/single.html"}).when("/logbook",{controller:"LogbookController",templateUrl:"views/logbook/main.html"}).otherwise({redirectTo:"/"})}]),app.config(["$httpProvider",function($httpProvider){$httpProvider.responseInterceptors.push("httpInterceptor")}]),app.run(["$rootScope","messageService",function($rootScope,messageService){$rootScope.$on("$routeChangeError",function(){messageService.setError("The app wanted to commit suicide.")})}])}(),function(){"use strict";var AddTeamController=function($scope,$location,messageService,authHttp){$scope.team={name:"",players:[{name:""},{name:""},{name:""},{name:""}]},$scope.submit=function(){var players=[];angular.forEach($scope.team.players,function(player){players.push(player.name)}),authHttp({url:"/teams/",method:"PUT",data:{name:$scope.team.name,players:players}}).success(function(){messageService.setDone("Team added!"),$location.path("/teams")}).error(function(data,status){messageService.setError(400==status?data:"Could not talk to server.")})}};angular.module("racepoint").controller("AddTeamController",AddTeamController)}(),function(){"use strict";var GatewayController=function($scope,$http,$location,messageService,apiUrl,auth){$scope.input={password:""},$scope.submit=function(){messageService.setInfo("Loading..."),$http({url:apiUrl+"/auth/",method:"POST",data:$scope.input}).success(function(data){auth.setToken(data.token),$location.path("REG"==data.role?"/teams":"/logbook")}).error(function(data,status){messageService.setError(400==status?data:"Could not talk to server.")})}};angular.module("racepoint").controller("GatewayController",GatewayController)}(),function(){"use strict";var LogbookController=function($scope,messageService,teamList,logbook){$scope.teams=[],teamList.load().then(function(){$scope.teams=teamList.getAll()},function(error){messageService.setError(error)}),$scope.nav={tab:2,log:null},$scope.$watch("nav.tab",function(newValue){0===newValue?$scope.arrival={team:null}:1==newValue?$scope.openLogs=logbook.getOpenLogs():$scope.logs=logbook.getLogs()}),$scope.addArrival=function(){$scope.arrival.team&&(logbook.addArrival($scope.arrival.team),$scope.nav.tab+=1)},$scope.addDeparture=function(teamId){logbook.addDeparture(teamId),$scope.nav.tab+=1},$scope.sync=function(){messageService.setInfo("Syncing..."),logbook.sync.start().then(function(){$scope.logs=logbook.getLogs(),messageService.setDone("Synchronised!")},function(error){messageService.setError(error)})},$scope.removeLog=function(logTimestamp){logbook.removeLog(logTimestamp),$scope.nav.tab-=1},$scope.sync()};angular.module("racepoint").controller("LogbookController",LogbookController)}(),function(){"use strict";var TeamController=function($scope,$routeParams,$location,messageService,teamList,authHttp){$scope.team=teamList.getTeam($routeParams.id),$scope.remove=function(){authHttp({url:"/teams/",method:"DELETE",data:{id:parseInt($routeParams.id)}}).success(function(){messageService.setDone("Team deleted."),$location.path("/teams")}).error(function(data){messageService.setError(data)})}};angular.module("racepoint").controller("TeamController",TeamController)}(),function(){"use strict";var TeamsController=function($scope,messageService,teamList){$scope.teams=[];var promise=teamList.load();promise.then(function(){$scope.teams=teamList.getAll(),messageService.setDone("Synchronised!")},function(error){messageService.setError(error)})};angular.module("racepoint").controller("TeamsController",TeamsController)}(),function(){"use strict";var messageBarDirective=function(messageService){return{restrict:"E",templateUrl:"views/helpers/message.html",link:function(scope){scope.message={type:"",text:""},scope.$watch(function(){return messageService.message.text},function(){scope.message.type=messageService.message.type,scope.message.text=messageService.message.text}),scope.clear=function(){messageService.clear()}}}};angular.module("racepoint").directive("messageBar",messageBarDirective)}(),function(){"use strict";var apiUrlFactory=function(){var apiUrl="";return apiUrl=0===window.location.search.indexOf("?local")?"http://localhost:8000/api":"http://racepoint.yatcode.com/api"},authFactory=function(){var Auth={token:!1,init:function(){localStorage.getItem("authToken")&&(Auth.token=localStorage.getItem("authToken"))},setToken:function(newToken){Auth.token=newToken,localStorage.setItem("authToken",newToken)},getToken:function(){return Auth.token},clear:function(){Auth.token="",localStorage.removeItem("authToken")}};return Auth.init(),Auth},authHttpFactory=function($http,apiUrl,auth){var authHttp=function(config){return config.url=apiUrl+config.url,config.headers=config.headers||{},config.headers["Racepoint-Token"]=auth.getToken(),$http(config)};return authHttp},httpInterceptorFactory=function($q,$location,messageService,auth){var httpInterceptor=function(promise){return promise.then(function(response){return response},function(response){return 403==response.status&&(messageService.setError("Your session has expired."),auth.clear(),$location.path("/")),$q.reject(response)})};return httpInterceptor};angular.module("racepoint").factory("apiUrl",apiUrlFactory).factory("auth",authFactory).factory("authHttp",authHttpFactory).factory("httpInterceptor",httpInterceptorFactory)}(),function(){"use strict";var logbookFactory=function($q,$timeout,authHttp,teamList){var Logbook={openLogs:[],logs:[],init:function(){localStorage.getItem("openLogs")&&(Logbook.openLogs=angular.fromJson(localStorage.getItem("openLogs"))),localStorage.getItem("logs")&&(Logbook.logs=angular.fromJson(localStorage.getItem("logs")))},sync:{error:null,start:function(){var deferred=$q.defer();return Logbook.sync.upload().then(Logbook.sync.download).then(function(){localStorage.setItem("logs",angular.toJson(Logbook.logs)),deferred.resolve()},function(){deferred.reject(Logbook.sync.error)}),deferred.promise},upload:function(){var promises=[];return angular.forEach(Logbook.logs,function(log){if(!log.synced){var deferred=$q.defer(),timestamp=null;"object"==typeof log.timestamp?timestamp=log.timestamp.getTime():(timestamp=new Date(log.timestamp),timestamp=timestamp.getTime()),authHttp({url:"/log/",method:"PUT",data:{team_id:log.teamId,event_type:log.type,timestamp:timestamp,is_successful:!1}}).success(function(data){log.id=data.id,log.synced=!0,deferred.resolve()}).error(function(data){Logbook.sync.error=data,deferred.reject()}),promises.push(deferred.promise)}}),$q.all(promises)},download:function(){var deferred=$q.defer();return authHttp({url:"/log/",method:"GET"}).success(function(data){var logs=[];angular.forEach(data,function(item){var log=new Logbook.Event(item.teamId,item.type);log.teamName=item.teamName,log.timestamp=item.timestamp,log.isSuccessful=item.isSuccessful,log.synced=!0,logs.push(log)}),Logbook.logs=logs,localStorage.setItem("logs",angular.toJson(Logbook.logs)),deferred.resolve()}).error(function(data){Logbook.sync.error=data,deferred.reject()}),deferred.promise}},getOpenLogs:function(){return Logbook.openLogs},getLogs:function(){var list=[];return angular.forEach(Logbook.logs,function(entry){list.push({id:entry.id,synced:entry.synced,teamName:entry.teamName,type:entry.type,timestamp:entry.timestamp})}),list},addArrival:function(teamId){var team=teamList.getTeam(teamId);Logbook.openLogs.push({teamId:team.id,teamName:team.name,timestamp:new Date}),localStorage.setItem("openLogs",angular.toJson(Logbook.openLogs))},addDeparture:function(teamId){for(var openLog=null,i=0;i<=Logbook.openLogs.length;i++)if(Logbook.openLogs[i].teamId==teamId){openLog=Logbook.openLogs[i];break}if(!openLog)return!1;var arrival=new Logbook.Event(openLog.teamId,"ARR"),departure=new Logbook.Event(openLog.teamId,"DEP");arrival.timestamp=openLog.timestamp,arrival.teamName=openLog.teamName,departure.teamName=openLog.teamName,Logbook.openLogs.splice(i,1),Logbook.logs.push(arrival),Logbook.logs.push(departure),localStorage.setItem("openLogs",angular.toJson(Logbook.openLogs)),localStorage.setItem("logs",angular.toJson(Logbook.logs))},removeLog:function(timestamp){for(var i=0;i<=Logbook.logs.length&&timestamp!=Logbook.logs[i].timestamp;i++);Logbook.logs[i].synced||(Logbook.logs.splice(i,1),localStorage.setItem("logs",angular.toJson(Logbook.logs)))},clear:function(){Logbook.openLogs=[],Logbook.logs=[],localStorage.removeItem("openLogs"),localStorage.removeItem("logs")},Event:function(teamId,type){var Event={id:null,synced:!1,teamId:null,teamName:null,type:null,timestamp:null,isSuccessful:!1};return Event.teamId=teamId,Event.type=type,Event.timestamp=new Date,Event}};return Logbook.init(),Logbook};angular.module("racepoint").factory("logbook",logbookFactory)}(),function(){"use strict";var messageServiceFactory=function($timeout){var MessageService={promise:null,message:{type:"",text:""},setMessage:function(message){MessageService.message.text=message,MessageService.promise=$timeout(function(){MessageService.message.type="",MessageService.message.text=""},2e3)},setError:function(message){MessageService.message.type="error",MessageService.setMessage(message)},setInfo:function(message){MessageService.message.type="info",MessageService.setMessage(message)},setDone:function(message){MessageService.message.type="done",MessageService.setMessage(message)},clear:function(){MessageService.message.type="",MessageService.message.text="",$timeout.cancel(MessageService.promise)}};return MessageService};angular.module("racepoint").factory("messageService",messageServiceFactory)}(),function(){"use strict";var networkFactory=function(){var Network={init:function(){}};return Network.init(),Network};angular.module("racepoint").factory("network",networkFactory)}(),function(){"use strict";var teamListFactory=function($q,authHttp){var TeamList={teams:[],init:function(){localStorage.getItem("teamList")&&(TeamList.teams=angular.fromJson(localStorage.getItem("teamList")))},load:function(){var deferred=$q.defer();return authHttp({url:"/teams/",method:"GET"}).success(function(data){TeamList.teams=data,localStorage.setItem("teamList",angular.toJson(data)),deferred.resolve()}).error(function(data){deferred.reject(data)}),deferred.promise},getAll:function(){return TeamList.teams},getTeam:function(teamId){for(var i=0;i<TeamList.teams.length;i++)if(TeamList.teams[i].id==teamId)return TeamList.teams[i];return null},clear:function(){TeamList.teams=[],localStorage.removeItem("teamList")}};return TeamList.init(),TeamList};angular.module("racepoint").factory("teamList",teamListFactory)}();